import customtkinter as ct

#making the Class for Calcuator 
class Calculator(ct.CTk):
    def __init__(self):
        super().__init__()
        
        
        #creating a frame for entry Frame
        
        self.entry_frame = ct.CTkFrame(self)
        self.entry_frame.grid(row=0,column=0,columnspan=4)
        #creating frame for numbers
        self.numbers_frame = ct.CTkFrame(self)
        self.numbers_frame.grid(row=1,column=0,columnspan=3)
        #creating a frame for operating buttons
        self.operators_frame=ct.CTkFrame(self)
        self.operators_frame.grid(row=1,column=3,sticky="nsew")
        
        #creating a tuble for buttons 
        numbers = ['7', '8', '9', '6', '5', '4', '1', '2', '3', '0']
        soperators =['=', 'C']
        operators = ['+', '-', 'x', '/']
        
        #creating an interactive entrybox
        self.entry_field=ct.CTkEntry(self.entry_frame)
        self.entry_field.grid(row=0,column=0,columnspan=2, stick="nsew")
        self.result_label = ct.CTkLabel(self, text="", font=("Arial", 24))
        self.result_label.grid()
        
        #looping through all the numbers and creating Buttons
        for i, number in enumerate(numbers):
            #special statents for the operators
            row = (i // 3)
            column = (i % 3)
            button = ct.CTkButton(self.numbers_frame, text=number, font=('<Helvertical>', 16), height=30, width=100, command=lambda num=number: self.append_to_entry(num))
            button.grid(row=row, column=column,padx=3, pady=3, sticky="nsew")#making everything sticky to north,south,east,west :D
            button.columnconfigure(0, weight=1)
            
        for i,soperators in enumerate(soperators):
            if soperators == '=':
                button = ct.CTkButton(self.numbers_frame, text=soperators, font=('Helvertical', 16), height=30, command=self.calculate_result)
            elif number == 'C':
                soperators = ct.CTkButton(self.numbers_frame, text=soperators, font=('Helvertical', 16), height=30, command=self.clear_entry)
            else:
                soperators = ct.CTkButton(self.numbers_frame, text=soperators, font= ('<Helvertical>', 16), height=30, command=lambda sop=soperators: self.append_to_entry(sop))
        
        #looping through them and creating buttons
        for i, operator in enumerate(operators):
            button = ct.CTkButton(self.operators_frame, text=operator, font=('<Helvertical>', 16), height=30, width=100, command=lambda op=operator: self.append_to_entry(op))
            button.grid(row=i, column=0,pady=3,sticky="w")
            button.columnconfigure(0, weight=1)
    #logik für resul label = ergebnis anzeige
    
        
    
    #logik für den '=' Button
    def calculate_result(self):
        entry_value = self.entry_field.get()
        try:
            parts = entry_value.split()
            numbers=[float(part) for part in parts[::2]]
            operators = [part for part in parts[1::2]]
            
            result=numbers[0]
            for i, operator in enumerate(operators):
                if operator == '+':
                    result += numbers[i+1]
                elif operator == '-':
                    result -= numbers[i+1]
                elif operator == '*':
                    result *= numbers[i+1]
                elif operator == '/':
                    result /= numbers[i+1]
            
            self.result_label.config(result)
        except Exception as e:
            self.result_label.config("Error")

            
        #logik zum löschen des Eingabefelds
    def clear_entry(self):
        self.entry_field.delete(0, ct.END)
        
        
    def resize(self, event):
        pass
    
    #logik für die eingabe von Buttons ins Entry Feld 
    def append_to_entry(self,text):
        current_text = self.entry_field.get()
        self.entry_field.delete(0, 'end')
        self.entry_field.insert(0, current_text + text)
    
    def delete_from_entry(self,text):
        current_text = self.entry_field.get()
        
    

    def button_event1(self):
        pass


calculator = Calculator()
calculator.mainloop()





